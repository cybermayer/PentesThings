"""

    The intendation behind this script is the fuzzing of different
    parameters in an HTTP request with different optional pacing.
    There were some issues I encountered with, while I was working
    with various fuzzing-softwares, but maybe those issues stem 
    from my laziness to not read the documentation, but sometimes 
    it's just easier to create something fresh than dealing with
    the old stuff.

        Example of usage: (placeholders in request body: <1> <2> <3> etc.)

            python3 ./this_script.py -body doc_with_req_body.txt -ip 127.0.0.1 -p 80 wordlist1.txt wordlist2.txt ... -o outputfile.txt -T 5 --parallel/--permutation

                -> Make sure that the order of placeholders and wordlists are identical.
                -> If you use the parallel mode, make sure that the wordlists have the same length.


"""


import socket
import argparse
import sys
import time

def main():

    parser = argparse.ArgumentParser(description="It's an HTTP-request-fuzzer.")

    parser.add_argument('-body', type=str, help="The file that contains the request body.")
    parser.add_argument('-ip', type=str, help="The destination ip.")
    parser.add_argument('-p', type=int, help="The destination port.")
    parser.add_argument('wordlists', type=str, nargs='+', help="Here have the wordlists to be submitted.")
    parser.add_argument('-o', type=str, help="The output-file")
    parser.add_argument('-T', type=int, choices=[1,2,3,4,5], default=3, help="Timing parameter with optinal speed values 1-5")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--parallel', action='store_true', help='Via this option the parameters will be read and sent parallel.')
    group.add_argument('--permutation', action='store_true', help='Via this option the parameters will be read and sent in all possible permutative combination.')

    args = parser.parse_args()

    ip = args.ip
    port = args.p
    body = args.body
    base_request = ""
    wordlists = args.wordlists
    output = args.o
    wait = 0.5-(args.T*0.1)
    placeholders = []
    fuzzing_matrix = [[] for _ in range(len(wordlists))]
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    address = (ip, port)

    client.connect(address)

    for i in range(len(wordlists)):
        placeholders.append(f"<{i+1}>")
        try:
            with open(wordlists[i], 'r') as params:
                for param in params:
                    fuzzing_matrix[i].append(param.strip())
        except IOError as err:
            print(f"The input file cannot be opened, because: {err}")
            sys.exit(1)

    with open(body, 'r') as input:
        for line in input:
            base_request += line.strip() + "\r\n"

    if args.parallel: 

        for i in range(len(fuzzing_matrix[0])):
            to_send = base_request    
            for j in range(len(wordlists)):
                to_send = to_send.replace(placeholders[j], fuzzing_matrix[j][i])
            client.send(to_send.encode())
            response = client.recv(4096)
            time.sleep(wait)
            try:
                with open(output, 'a') as of: 
                    of.write(f"{response}\n\n")
            except IOError as err:
                print(f"The output-file cannot be saved, because: {err}")
                sys.exit(1)
                
    elif args.permutation:

        request = base_request
        pacing = [0] * len(placeholders)

        if len(placeholders) == 1:
            for i in range (len(fuzzing_matrix[0])):
                to_send = request.replace(placeholders[0], fuzzing_matrix[0][i])  
                client.send(to_send.encode())
                response = client.recv(4096)
                try:
                    with open(output, 'a') as of:
                        of.write(f"{response}\n\n")
                except IOError as err:
                    print(f"The output-file cannot be saved, because: {err}")
                    sys.exit(1)
                time.sleep(wait)

        else:
            fuzzed = False
            while not fuzzed:
                request = base_request
                for i in range(len(placeholders)-1):
                    for j in range(len(placeholders)-1, 0, -1):
                        if pacing[j] == len(fuzzing_matrix[j]):
                            pacing[j] = 0
                            pacing[j-1] += 1
                    request = request.replace(placeholders[i], fuzzing_matrix[i][pacing[i]])
                    if i == len(placeholders) - 2:
                        for _ in range(len(fuzzing_matrix[i+1])):
                            to_send = request.replace(placeholders[i+1], fuzzing_matrix[i+1][pacing[i+1]])
                            client.send(to_send.encode())
                            response = client.recv(4096)
                            try:
                                with open(output, 'a') as of:
                                    of.write(f"{response}\n\n")
                            except IOError as err:
                                print(f"The output-file cannot be saved, because: {err}")
                                sys.exit(1)
                            pacing[i+1] += 1  
                            time.sleep(wait)      
                    if pacing[0] == len(fuzzing_matrix[0]) - 1:
                        fuzzed = True

        client.close()

if __name__ == "__main__":
    main()
