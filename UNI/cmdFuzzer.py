'''

I wrote this script for fuzzing terminal commands. 
The usage is quite simple and handy. You specify the command 
to be executed (I suggest using quotes for this), including 
the fuzzing positions with the predefined placeholder models 
(<1>, <2>, <3>... etc.), and list the wordlists to load. 
Make sure you enter everything in the correct order.

    Example for the usage:

            python3 ./cmdFuzzer.py "curl -sOJ http://127.0.0.1:80/<1>/<2>.pdf" wordlist_for_directories.txt wordlist_for_files.txt
            
'''

import sys
import subprocess

def main():

    wordlists=[]
    column = -1
    fuzzed = False
    
    for i in range(2, len(sys.argv)):
        wordlists.append(sys.argv[i])

    placeholders = [f"<{i}>" for i in range(1, len(wordlists)+1)]
    pacing = [0] * len(placeholders)
    fuzzing_matrix = [[] for _ in range(len(wordlists))]

    for wordlist in wordlists:
        column += 1
        with open(wordlist, 'r') as file:
            for line in file:
                fuzzing_matrix[column].append(line.strip())

    base_cmd = sys.argv[1]

    while not fuzzed:

        cmd = base_cmd
        for i in range(len(placeholders)-1):
            for j in range(len(placeholders)-1, 0, -1):
                if pacing[j] == len(fuzzing_matrix[j]):
                   pacing[j] = 0
                   pacing[j-1] += 1
            cmd = cmd.replace(placeholders[i], fuzzing_matrix[i][pacing[i]])
            if i == len(placeholders) - 2:
                for _ in range(len(fuzzing_matrix[i+1])):
                    to_execute = cmd.replace(placeholders[i+1], fuzzing_matrix[i+1][pacing[i+1]])
                    subprocess.run(to_execute, shell=True)
                    pacing[i+1] += 1        
            if pacing[0] == len(fuzzing_matrix[0]) - 1:
                fuzzed = True


if __name__ == "__main__":
    main()
