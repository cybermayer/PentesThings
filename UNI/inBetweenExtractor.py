"""
    The main reason behind this script was the extraction of identification tokens from http-responses.
    The pattern frame has been taken place before and after the token was always the same so I decided 
    to write a script which is able to extract that token inbetween the specified prefix and suffix.
    The usage of the script is pretty handy and strives for the reusability.

        Example of usage:

                python3 ./inBetween.py inputfile.txt -pre "[(" -suf "])" -o outputfile.txt
                                                            |        |
                    it will extract everything between    this and this

"""

import argparse

def main():

    parser = argparse.ArgumentParser(description="Find and extract substrings inbetween the specified predecessor and successor.")

    parser.add_argument('input_filename', type=str, help='Name of the file you want to be processed.')
    parser.add_argument('-pre', type=str, help='The substring that is placed before the pattern you are looking for.')
    parser.add_argument('-suf', type=str, help='The substring that is placed after the pattern you are looking for.')
    parser.add_argument('-o', type=str, help='The name of the outputfile.')

    args = parser.parse_args()
    
    input = args.input_filename
    prefix = args.pre
    suffix = args.suf
    output = args.o

    try:
        with open(input, 'r') as infi:
            for line in infi:
                if line.find(prefix) != -1:
                    start = line.find(prefix) + len(prefix)
                    if line.find(suffix) != -1:
                        end = line.find(suffix)
                        token = line[start:end]
                        try:
                            with open(output, 'a') as oufi:
                                oufi.write(f"{token}\n")
                        except IOError as err:
                            print(f"The writing operation failed, because: {err}")
    except IOError as err:
        print(f"The file cannot be be opened, because: {err}")


if __name__ == "__main__":
    main()
